import 'package:flutter/material.dart';
//package used to manage date formats
import 'package:intl/intl.dart';

import '../models/transaction.dart';
import './chart_bar.dart';

class Chart extends StatelessWidget {
  final List<Transaction> _txList;

  Chart(this._txList);

  // using a getter like this permits to act as a function that will dynamically generate the wanted list
  // groupedAmountsByDay is a property that is dynamically generated by a function at the moment we call it
  // we could also make a setter for it, using the same synthat, "set" instead of "get", and a function corpse
  List<Map<String, Object>> get groupedAmountsByDay {
    // List.generate permits to easily
    return List.generate(7, (index) {
      DateTime weekDay = DateTime.now().subtract(Duration(days: index));
      double totalAmount = 0.0;

      for (int i = 0; i < _txList.length; i++) {
        if (_txList[i].date.day == weekDay.day &&
            _txList[i].date.month == weekDay.month &&
            _txList[i].date.year == weekDay.year) {
          totalAmount += _txList[i].amount;
        }
      }
      // What is written for day, permits to find the day in weekDay DateTime, and convert it
      // into a string of 3 chars
      return {
        'day': DateFormat.E().format(weekDay),
        'totalAmount': totalAmount
      };
    }).reversed.toList();
  }

  // .fold() method on a lis permits to iterate through an iterable and then addition the values of
  // some variables inside it.
  // for example here:
  // we give 0.0 as initial sum, then at each iteration we add the value of item['totalAmount'] to sum.
  // second argument (item) refers to what we point to while iterating, here it's the Map<String, Object>
  double get totalSpending {
    return groupedAmountsByDay.fold(0.0, (sum, item) {
      return sum + item['totalAmount'];
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      // responsive MediaQuery
      // height: MediaQuery.of(context).size.height * 0.3,
      child: Card(
        color: Theme.of(context).accentColor,
        elevation: 5,
        margin: EdgeInsets.all(10),
        child: Padding(
          padding: EdgeInsets.symmetric(vertical: 5),
          child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              // by calling grouperdAmountsByDay we call the getter which then acts like a function
              children: groupedAmountsByDay.map((tx) {
                return Flexible(
                  // tight means all widgets in the flex take same space
                  fit: FlexFit.tight,
                  child: ChartBar(
                    tx['totalAmount'],
                    tx['day'],
                    totalSpending == 0.0
                        ? 0.0
                        : (tx['totalAmount'] as double) / totalSpending,
                  ),
                );
              }).toList()),
        ),
      ),
    );
  }
}
